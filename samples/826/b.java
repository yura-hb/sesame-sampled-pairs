class Trie {
    /**
    * Get an object that matches the key.
    *
    * @param key must be a 7-bit ASCII string
    *
    * @return The object that matches the key, or null.
    */
    public Object get(final String key) {

	final int len = key.length();

	/* If the name is too long, we won't find it, this also keeps us
	 * from overflowing m_charBuffer
	 */
	if (m_charBuffer.length &lt; len)
	    return null;

	Node node = m_Root;
	switch (len) // optimize the look up based on the number of chars
	{
	// case 0 looks silly, but the generated bytecode runs
	// faster for lookup of elements of length 2 with this in
	// and a fair bit faster.  Don't know why.
	case 0: {
	    return null;
	}

	case 1: {
	    final char ch = key.charAt(0);
	    if (ch &lt; ALPHA_SIZE) {
		node = node.m_nextChar[ch];
		if (node != null)
		    return node.m_Value;
	    }
	    return null;
	}
	//        comment out case 2 because the default is faster
	//        case 2 :
	//            {
	//                final char ch0 = key.charAt(0);
	//                final char ch1 = key.charAt(1);
	//                if (ch0 &lt; ALPHA_SIZE && ch1 &lt; ALPHA_SIZE)
	//                {
	//                    node = node.m_nextChar[ch0];
	//                    if (node != null)
	//                    {
	//
	//                        if (ch1 &lt; ALPHA_SIZE)
	//                        {
	//                            node = node.m_nextChar[ch1];
	//                            if (node != null)
	//                                return node.m_Value;
	//                        }
	//                    }
	//                }
	//                return null;
	//           }
	default: {
	    key.getChars(0, len, m_charBuffer, 0);
	    // copy string into array
	    for (int i = 0; i &lt; len; i++) {
		final char ch = m_charBuffer[i];
		if (ALPHA_SIZE &lt;= ch) {
		    // the key is not 7-bit ASCII so we won't find it here
		    return null;
		}

		node = node.m_nextChar[ch];
		if (node == null)
		    return null;
	    }

	    return node.m_Value;
	}
	}
    }

    /** helper buffer to convert Strings to char arrays */
    private char[] m_charBuffer = new char[0];
    /** The root node of the tree.    */
    Node m_Root;
    /** Size of the m_nextChar array.  */
    public static final int ALPHA_SIZE = 128;

}

